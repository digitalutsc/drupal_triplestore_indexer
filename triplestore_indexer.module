<?php

/**
 * @file
 * Contains triplestore_indexer.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\advancedqueue\Entity\Queue;
use Drupal\advancedqueue\Job;

/**
 * Implements hook_help().
 */
function triplestore_indexer_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the triplestore_indexer module.
    case 'help.page.triplestore_indexer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module will listening to Content event and indexing it to RDF and send result to Triple store') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function triplestore_indexer_theme()
{
  return [
    'triplestore_indexer' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implementing action hook_entity_insert
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function triplestore_indexer_entity_insert(\Drupal\Core\Entity\EntityInterface $entity)
{
  //drupal_register_shutdown_function('_indexing', $entity, 'insert');
  preIndexing($entity, 'insert');

}

/**
 * Implementing action hook_enitty_update
 *
 * @param $entity
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function triplestore_indexer_entity_update(\Drupal\Core\Entity\EntityInterface $entity)
{
  //drupal_register_shutdown_function('_indexing', $entity, 'update');
  preIndexing($entity, 'update');
}

/**
 * Implementing action hook_entity_delete
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function triplestore_indexer_entity_delete(\Drupal\Core\Entity\EntityInterface $entity)
{
  //drupal_register_shutdown_function('_indexing', $entity, 'delete');
  preIndexing($entity, 'delete');
}


/**
 * Debug function: display any variable to error log
 *
 * @param $thing
 */
if (!function_exists('logging')) {
  function print_log($thing)
  {
    error_log(print_r($thing, true), 0);
  }

}
/**
 * Debug function: display any variable to current webpage
 * @param $thing
 */
if (!function_exists('logging')) {
  function logging($thing)
  {
    echo "<pre>";
    print_r($thing);
    echo "</pre>";
  }
}


/**
 * funcation call embedded after hook_insert,hook_update,hook_delete executed
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param $action
 */
function preIndexing(\Drupal\Core\Entity\EntityInterface $entity, $action)
{
  //TODO: check if the entity is content type is selected and triggered event selected
  $config = \Drupal::config('triplestore_indexer.triplestoreindexerconfig');
  $triggeredEvents = array_keys(array_filter($config->get('events-to-index')));
  $indexedContentTypes = array_keys(array_filter($config->get('content-type-to-index')));
  $indexedVocabulary = array_keys(array_filter($config->get('taxonomy-to-index')));

  $result = null;
  switch ($action) {
    case 'insert':
    {
      if (in_array("created", $triggeredEvents)
        && ($entity->getEntityTypeId() === 'node' && in_array($entity->bundle(), $indexedContentTypes)
          || ($entity->getEntityTypeId() === 'taxonomy_term' && in_array($entity->bundle(), $indexedVocabulary)))) {

        // Create a job and add to Advanced Queue
        $payload = [
          'nid' => $entity->id(),
          'type' => $entity->getEntityTypeId(),
          'action' => "insert"
        ];
        $job = Job::create('triplestore_index_job', $payload);
        if ($job instanceof Job) {
          $q = Queue::load($config->get("advancedqueue-id"));
          $q->enqueueJob($job);
        }
      }
      break;
    }
    case 'update':
    {
      if (in_array("updated", $triggeredEvents)
        && ($entity->getEntityTypeId() === 'node' && in_array($entity->bundle(), $indexedContentTypes)
          || ($entity->getEntityTypeId() === 'taxonomy_term' && in_array($entity->bundle(), $indexedVocabulary)))) {

        // Create a job and add to Advanced Queue
        $payload = [
          'nid' => $entity->id(),
          'type' => $entity->getEntityTypeId(),
          'action' => "update"
        ];
        $job = Job::create('triplestore_index_job', $payload);
        if ($job instanceof Job) {
          $q = Queue::load($config->get("advancedqueue-id"));
          $q->enqueueJob($job);
        }
      }
      break;
    }
    case 'delete':
    {
      if (in_array("deleted", $triggeredEvents)
        && ($entity->getEntityTypeId() === 'node' && in_array($entity->bundle(), $indexedContentTypes)
          || ($entity->getEntityTypeId() === 'taxonomy_term' && in_array($entity->bundle(), $indexedVocabulary)))) {
        // Create a job and add to Advanced Queue
        $payload = [
          'nid' => $entity->id(),
          'type' => $entity->getEntityTypeId(),
          'action' => "delete"
        ];
        $job = Job::create('triplestore_index_job', $payload);
        if ($job instanceof Job) {
          $q = Queue::load($config->get("advancedqueue-id"));
          $q->enqueueJob($job);
        }
      }
      break;
    }
    default:
    {
      break;
    }
  }
}


