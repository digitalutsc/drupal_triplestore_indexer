<?php

/**
 * @file
 * Contains triplestore_indexer.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function triplestore_indexer_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the triplestore_indexer module.
    case 'help.page.triplestore_indexer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module will listening to Content event and indexing it to RDF and send result to Triple store') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function triplestore_indexer_theme()
{
  return [
    'triplestore_indexer' => [
      'render element' => 'children',
    ],
  ];
}

function triplestore_indexer_entity_update($entity) {
  global $base_url;
  print_log(triplestore_indexer_entity_update);
  print_log($entity->id());
  print_log($base_url);
  print_log($entity->get('body')->getValue()[0]['value']);
  print_log($entity->bundle());

  $node = \Drupal::entityTypeManager()->getStorage('node')->load($entity->id());

  // get author
  $owner = $node->getOwner()->getDisplayName();
  print_log($owner);
}


function triplestore_indexer_entity_insert($entity) {
  global $base_url;
  print_log(triplestore_indexer_entity_insert);
  // get nid from entity
  $nid = "<$base_url/node/" .$entity->id() .">";
  // get title
  $title = 'dc:title "' . $entity->getTitle(). '"';
  // get body
  $body = 'dc:description "' .  trim(preg_replace('/\s+/', ' ',strip_tags($entity->get('body')->getValue()[0]['value']) )). '"';

  $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

  // get author
  $node = \Drupal::entityTypeManager()->getStorage('node')->load($entity->id());

  // get author
  $owner = $node->getOwner()->getDisplayName();
  $author = 'dc:creator "' . $owner . '"' ;

  // get node type
  $type = 'dc:type "' . $entity->bundle() . '"';

  // get created time
  $published_at = 'dc:date "'.  date("F j, Y, g:i a", $node->getCreatedTime()) . '"';

  $data = "$nid $title; $body; $type; $author; $published_at";

  $params = "update=PREFIX  dc: <http://purl.org/dc/elements/1.1/> INSERT DATA { $data }";

  // send the post request
  tripleStore_post($params);

}

function tripleStore_post($params) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, "http://localhost:8080/bigdata/namespace/Demo/sparql");

  curl_setopt($ch, CURLOPT_FAILONERROR, true);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 2);
  curl_setopt($ch, CURLOPT_TIMEOUT, 3);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $server_output = curl_exec($ch);
  if (curl_errno($ch)) {
    $error = curl_error($ch);
  }

  if(!$error)
    echo $server_output;
  else
    echo $error;

  curl_close($ch);
}


/**
 * Custom Encrypt function
 *
 * https://www.geeksforgeeks.org/how-to-encrypt-and-decrypt-a-php-string/
 *
 * @param type $stringToEncrypt : string to encyrpt
 * @param type $encryption_key : module name
 * @param type $encryption_iv : timestamp of application
 */
function secureEncryption($stringToEncrypt, $encryption_key, $encryption_iv)
{
  // Store the cipher method
  $ciphering = "AES-128-CTR";

  // Use OpenSSl Encryption method
  $iv_length = openssl_cipher_iv_length($ciphering);
  $options = 0;

  // Use openssl_encrypt() function to encrypt the data
  return openssl_encrypt($stringToEncrypt, $ciphering,
    $encryption_key, $options, $encryption_iv);
}

/**
 * Custom Decryption function
 *
 * https://www.geeksforgeeks.org/how-to-encrypt-and-decrypt-a-php-string/
 * @param type $stringToEncrypt : string to decrypt
 * @param type $decryption_key : module name
 * @param type $decryption_iv : timestamp of application
 * @return type
 */
function secureDecryption($stringToEncrypt, $decryption_key, $decryption_iv)
{
  $ciphering = "AES-128-CTR";

  // Use OpenSSl Encryption method
  $iv_length = openssl_cipher_iv_length($ciphering);
  $options = 0;
  // Use openssl_decrypt() function to decrypt the data
  return openssl_decrypt($stringToEncrypt, $ciphering,
    $decryption_key, $options, $decryption_iv);
}
